#!/bin/bash

die(){
    >&2 echo "ccrun: ERROR: $*"
    exit 1
}

print_help(){
    while IFS= read line; do
        echo "$line"
    done <<-EOF
ccrun FILES [FLAGS] [-- PROG_FLAGS]
  Compiles and runs a c family program
  If '.cpp' was found in files then it will use g++ otherwise it will use gcc
    FILE       - source file to be run
    PROG_FLAGS - flags to be passed to the executable being run
    FLAGS:
      -c CC, --compiler CC          - set compiler to CC
      -o OUTPUT, --output OUTPUT    - set output executable file to OUTPUT [default: "\$TEMP_DIR/ccdbg.out"]
      -f CFLAGS, --cflags CFLAGS    - flags to pass to the compiler
      -D DBGR, --debugger DBGR      - set the debugger to DBGR [default: lldb]
      -d, --debug                   - debug instead of running
      -n, --no-run                  - don't run the executable, just compile
      -h, --help                    - print this message
EOF
}

if [[ $# == 0 ]]; then # if no args
    print_help
    exit 0
fi
cc=""
files=()
no_run=0
cflags=""
debug=0
debugger="lldb"
output="$TEMP_DIR/ccrun.out"
while [[ $# > 0 ]]; do
    arg="$1"
    shift
    case "$arg" in # convert all long flags into short
        --compiler)
            arg='-c'
            ;;
        --output)
            arg='-o'
            ;;
        --no-run)
            arg='-n'
            ;;
        --help)
            arg='-h'
            ;;
    esac
    case "$arg" in # parse all short flags
        --)
            break # the rest of the args get passed to the executable
            ;;
        --*)
            die "unexpected long flag '$arg'"
            ;;
        -)
            die "unexpected flag '-'"
            ;;
        -*)
            need_arg=0
            flags="${arg#?}" # everything but first character
            for flag in `echo "$flags" | grep -o .`; do
                [[ $need_arg == 1 ]] && die "-$flag_n_arg flag expected an argument"
                case "$flag" in
                    c|o|f|D)
                        need_arg=1
                        flag_n_arg=$flag
                        ;;
                    n)
                        no_run=1
                        ;;
                    d)
                        debug=1
                        ;;
                    h)
                        print_help
                        exit 0
                        ;;
                    *)
                        die "unexpected flag '$flag'"
                        ;;
                esac
            done
            flag=${arg: -1} # last character
            if [[ $need_arg == 1 ]]; then
                [[ $# > 0 ]] || die "-$flag flag expected an argument"
                case $flag in
                    c)
                        cc="$1"
                        ;;
                    o)
                        output="$1"
                        ;;
                    f)
                        cflags="$1"
                        ;;
                    D)
                        debugger="$1"
                        ;;
                esac
                shift
            fi
            ;;
        *)
            files+=($arg)
            ;;
    esac
done
[[ "$output" == */* ]] || output="./$output"
# if no compiler set
[[ -z $cc ]] && if [[ "${files[@]}" == *.cpp* ]]; then # if .cpp is in files
    cc=g++
else # no .cpp in files
    cc=gcc
fi
[[ $debug == 1 ]] && cflags="-g $cflags"
"$cc" $cflags "${files[@]}" -o "$output" 
code=$?
[[ $code == 0 ]] || exit $code
if [[ $no_run == 0 && $debug == 0 ]]; then
    "$output" "$@"
elif [[ $debug == 1 ]]; then
    "$debugger" "$output" "$@"
fi
