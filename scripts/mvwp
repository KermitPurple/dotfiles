#!/bin/sh

err(){
    >&2 echo -e "mvwp: \033[1;31merror:\033[0m \033[1;37m$*\033[0m" # print colored output to sterr
}

die(){
    err $*
    exit 1
}

help(){
    while IFS= read -r line; do
        echo "$line"
    done <<-EOF
mvwp CMD FILES [FLAGS]
  move with pipe. This script renames files by piping the name of each file through
  CMD to get the new name of the file.
    CMD - the command to run
    FILES - the files to rename
    FLAGS:
      -d, --dry-run   show which files would be renamed but do not rename them
      -v, --verbose   print which files are being changed
      -h, --help      print this help message
EOF
}
files=()
dry_run=0
verbose=0
while [ $# -gt 0 ]; do
    arg="$1"
    case "$arg" in
        --help|-h)
            arg='-h'
            ;;
        --dry-run|-d)
            arg='-d'
            ;;
        --verbose|-v)
            arg='-v'
            ;;
    esac
    case "$arg" in
        -*)
            for (( i = 1; i < ${#arg}; i++ )); do
                flag=${arg:$i:1}
                case $flag in
                    h)
                        help
                        exit 0
                        ;;
                    d)
                        dry_run=1
                        verbose=1
                        ;;
                    v)
                        verbose=1
                        ;;
                    *)
                        die "Unexpected flag '-$flag'";
                        ;;
                esac
            done
            ;;
        *)
            if [ -z "$cmd" ]; then
                cmd="$1"
            else
                files+=($1)
            fi
            ;;
    esac
    shift
done

[[ -z "$cmd" ]] && die "Expected argument CMD"
[[ -z "${files[@]}" ]] && die "Expected at least 1 argument for FILES"

for file in "${files[@]}"; do
    new=`echo "$file" | $cmd`
    [[ $verbose = 1 ]] && echo "$file -> $new"
    if [[ $dry_run = 0 ]]; then
        mv "$file" "$new"
    fi
done
