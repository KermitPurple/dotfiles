#!/bin/bash

die(){
    >&2 echo "ccdbg: ERROR: $*"
    exit 1
}

print_help(){
    while IFS= read line; do
        echo "$line"
    done <<-EOF
ccdbg FILES [FLAGS] [-- PROG_FLAGS]
  Compiles and runs a debugger a c family program
  If '.cpp' was found in files then it will use g++ otherwise it will use gcc
    FILE       - source file to be run
    PROG_FLAGS - flags to be passed to the debugger being run
    FLAGS:
      -c CC, --compiler CC          - set compiler to CC
      -d DBG, --debugger DBG        - set debugger to DBG [default: "lldb"]
      -o OUTPUT, --output OUTPUT    - set output executable file to OUTPUT [default: "\$TEMP_DIR/ccdbg.out"]
      -h, --help                    - print this message
EOF
}

[[ $# > 0 ]] || print_help && exit 0 # if no args print help and exit
cc=""
db="lldb"
files=()
output="$TEMP_DIR/ccdbg.out"
while [[ $# > 0 ]]; do
    arg="$1"
    shift
    case "$arg" in
        -c|--compiler)
            [[ $# > 0 ]] || die "-c flag expected an arugment"
            cc="$1"
            shift
            ;;
        -d|--debugger)
            [[ $# > 0 ]] || die "-d flag expected an arugment"
            db="$1"
            shift
            ;;
        -o|--output)
            [[ $# > 0 ]] || die "-o flag expected an arugment"
            output="$1"
            shift
            ;;
        -h|--help)
            print_help
            exit 0
            ;;
        --)
            break # the rest of the args get passed to the executable
            ;;
        -*)
            die "unexpected flag '$arg'"
            ;;
        *)
            files+=($arg)
            ;;
    esac
done
# if no compiler set
[[ -z $cc ]] && if [[ "${files[@]}" == *.cpp* ]]; then # if .cpp is in files
    cc=g++
else # no .cpp in files
    cc=gcc
fi

$cc "${files[@]}" -g -o "$output" && $db $output
